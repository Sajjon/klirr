name: Release
on:
  workflow_dispatch:
  push:
    branches:
      - main
env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: 1.85.0
jobs:
  spelling:
    name: Spell Check with Typos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
      - name: Spell Check Repo
        uses: crate-ci/typos@v1.33.1
  check-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --check
  test-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
      - name: Run rust tests
        run: cargo test --locked -- --test-threads=1
  create-release:
    needs:
      - spelling
      - check-formatting
      - test-rust
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required by cargo-release to get tags
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
      - name: Install cargo-edit for version bumping
        run: cargo install cargo-edit
      - name: Bump version patch
        run: |
          # Bump version in all workspace crates
          cargo set-version --bump patch
      - name: Extract new version from Cargo.toml
        id: extract_version
        run: |
          version=$(cargo metadata --no-deps --format-version 1 --manifest-path crates/cli/Cargo.toml | jq -r '.packages[0].version')
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Commit and push version bump
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit - version might already be bumped"
          else
            git commit -m "chore: release v${{ steps.extract_version.outputs.version }}"
            git push origin main
          fi
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --manifest-path crates/core/Cargo.toml
          cargo publish --manifest-path crates/render/Cargo.toml  
          cargo publish --manifest-path crates/cli/Cargo.toml
      - name: Create GitHub Release with verified tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: klirr v${{ steps.extract_version.outputs.version }}
          body_path: CHANGELOG.md
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-and-upload:
    needs: create-release
    permissions:
      contents: write
      id-token: write # Required for attestations
      attestations: write # Required for attestations
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: klirr-x86_64-unknown-linux-gnu
          - target: aarch64-apple-darwin
            os: macos-latest
            asset_name: klirr-aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
          target: ${{ matrix.target }}
      - name: Build for ${{ matrix.target }} (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cargo build --release --target ${{ matrix.target }}
      - name: Build for ${{ matrix.target }} (macOS)
        if: matrix.os == 'macos-latest'
        run: cargo build --release --target ${{ matrix.target }}
      - name: Prepare binary for upload
        run: |
          mkdir -p upload
          cp target/${{ matrix.target }}/release/klirr upload/${{ matrix.asset_name }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: upload/${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload binary for ${{ matrix.target }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: upload/${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  update-homebrew:
    needs:
      - create-release
      - build-and-upload
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download binaries for checksums
        run: |
          curl -L -o klirr-x86_64-unknown-linux-gnu "https://github.com/Sajjon/klirr/releases/download/v${{ needs.create-release.outputs.version }}/klirr-x86_64-unknown-linux-gnu"
          curl -L -o klirr-aarch64-apple-darwin "https://github.com/Sajjon/klirr/releases/download/v${{ needs.create-release.outputs.version }}/klirr-aarch64-apple-darwin"
      - name: Generate SHA256 checksums
        id: sha256
        run: |
          echo "sha_linux=$(shasum -a 256 klirr-x86_64-unknown-linux-gnu | awk '{ print $1 }')" >> $GITHUB_OUTPUT
          echo "sha_macos=$(shasum -a 256 klirr-aarch64-apple-darwin | awk '{ print $1 }')" >> $GITHUB_OUTPUT
      - name: Update Homebrew Formula
        run: |
          # Clone the tap repository
          git clone https://x-access-token:${{ secrets.HOMEBREW_TAP_PUSH_TOKEN }}@github.com/Sajjon/homebrew-klirr.git
          cd homebrew-klirr

          # Set variables for cleaner code
          FORMULA_FILE="Formula/klirr.rb"
          VERSION="${{ needs.create-release.outputs.version }}"
          SHA_LINUX="${{ steps.sha256.outputs.sha_linux }}"
          SHA_MACOS="${{ steps.sha256.outputs.sha_macos }}"

          # Create Formula directory if it doesn't exist
          mkdir -p Formula

          # Generate the formula content using printf for better control
          printf 'class Klirr < Formula\n' > "$FORMULA_FILE"
          printf '  desc "Generate invoice with auto invoice number setting & working days calc"\n' >> "$FORMULA_FILE"
          printf '  homepage "https://github.com/Sajjon/klirr"\n' >> "$FORMULA_FILE"
          printf '  url "https://github.com/Sajjon/klirr/releases/download/v%s/klirr-aarch64-apple-darwin"\n' "$VERSION" >> "$FORMULA_FILE"
          printf '  sha256 "%s"\n\n' "$SHA_MACOS" >> "$FORMULA_FILE"
          printf '  def install\n' >> "$FORMULA_FILE"
          printf '    if OS.mac?\n' >> "$FORMULA_FILE"
          printf '      bin.install "klirr-aarch64-apple-darwin" => "klirr"\n' >> "$FORMULA_FILE"
          printf '    elsif OS.linux?\n' >> "$FORMULA_FILE"
          printf '      url "https://github.com/Sajjon/klirr/releases/download/v%s/klirr-x86_64-unknown-linux-gnu"\n' "$VERSION" >> "$FORMULA_FILE"
          printf '      sha256 "%s"\n' "$SHA_LINUX" >> "$FORMULA_FILE"
          printf '      bin.install "klirr-x86_64-unknown-linux-gnu" => "klirr"\n' >> "$FORMULA_FILE"
          printf '    end\n' >> "$FORMULA_FILE"
          printf '  end\n\n' >> "$FORMULA_FILE"
          printf '  test do\n' >> "$FORMULA_FILE"
          printf '    system bin/"klirr", "--help"\n' >> "$FORMULA_FILE"
          printf '  end\n' >> "$FORMULA_FILE"
          printf 'end\n' >> "$FORMULA_FILE"

          # Commit and push the changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$FORMULA_FILE"
          git commit -m "klirr: update to $VERSION"
          git push
