name: Release

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: 1.85.0

jobs:
  spelling:
    name: Spell Check with Typos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
      - name: Spell Check Repo
        uses: crate-ci/typos@v1.33.1

  check-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --check

  test-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
      - name: Run rust tests
        run: cargo test --locked -- --test-threads=1

  create-release:
    needs: [spelling, check-formatting, test-rust]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required by cargo-release to get tags
      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Configure Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run cargo release patch
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo release patch --execute --no-confirm

      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          version=$(grep '^version' Cargo.toml | head -n1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.extract_version.outputs.version }}"
          name: "klirr v${{ steps.extract_version.outputs.version }}"
          body_path: CHANGELOG.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    needs: create-release
    runs-on: ubuntu-latest

    permissions:
      contents: write

    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            asset_name: klirr-x86_64-unknown-linux-gnu
          - target: aarch64-apple-darwin
            asset_name: klirr-aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
      - name: Install cross
        run: cargo install cross
      - name: Build for ${{ matrix.target }}
        run: cross build --release --target ${{ matrix.target }}
      - name: Upload binary for ${{ matrix.target }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.create-release.outputs.version }}"
          files: target/${{ matrix.target }}/release/klirr
          asset_name: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download binaries for checksums
        run: |
          wget -O klirr-x86_64-unknown-linux-gnu "https://github.com/Sajjon/klirr/releases/download/v${{ needs.create-release.outputs.version }}/klirr-x86_64-unknown-linux-gnu"
          wget -O klirr-aarch64-apple-darwin "https://github.com/Sajjon/klirr/releases/download/v${{ needs.create-release.outputs.version }}/klirr-aarch64-apple-darwin"
      - name: Generate SHA256 checksums
        id: sha256
        run: |
          echo "sha_linux=$(shasum -a 256 klirr-x86_64-unknown-linux-gnu | awk '{ print $1 }')" >> $GITHUB_OUTPUT
          echo "sha_macos=$(shasum -a 256 klirr-aarch64-apple-darwin | awk '{ print $1 }')" >> $GITHUB_OUTPUT

      - name: Update Homebrew Formula
        run: |
          git clone https://x-access-token:${{ secrets.HOMEBREW_TAP_PUSH_TOKEN }}@github.com/Sajjon/homebrew-klirr.git
          cd homebrew-klirr
          formula="klirr.rb"
          version="${{ needs.create-release.outputs.version }}"
          sha_linux="${{ steps.sha256.outputs.sha_linux }}"
          sha_macos="${{ steps.sha256.outputs.sha_macos }}"
          cat <<-EOF > $formula
          class Klirr < Formula
            desc "Generate invoice with auto invoice number setting & working days calc."
            homepage "https://github.com/Sajjon/klirr"
            version "$version"

            on_macos do
              url "https://github.com/Sajjon/klirr/releases/download/v$version/klirr-aarch64-apple-darwin"
              sha256 "$sha_macos"
            end

            on_linux do
              url "https://github.com/Sajjon/klirr/releases/download/v$version/klirr-x86_64-unknown-linux-gnu"
              sha256 "$sha_linux"
            end

            def install
              bin.install "klirr"
            end

            test do
              system "#{bin}/klirr", "--help"
            end
          end
          EOF
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add $formula
          git commit -m "Update klirr formula to v$version"
          git push
